---
import BaseLayout from './BaseLayout.astro';
import ArticleSchema from '../components/seo/ArticleSchema.astro';

interface Props {
  title: string;
  description: string;
  pubDate: Date;
  updatedDate?: Date;
  author?: string;
  tags?: string[];
  image?: string;
  lang?: 'en' | 'es';
}

const {
  title,
  description,
  pubDate,
  updatedDate,
  author = 'Luis Bonilla',
  tags = [],
  image,
  lang = 'en',
} = Astro.props;
---

<BaseLayout
  title={title}
  description={description}
  lang={lang}
  article={true}
  publishedTime={pubDate.toISOString()}
  modifiedTime={updatedDate?.toISOString()}
  author={author}
  tags={tags}
  image={image}
>
  <ArticleSchema
    title={title}
    description={description}
    author={author}
    datePublished={pubDate.toISOString()}
    dateModified={updatedDate?.toISOString()}
    tags={tags}
    image={image}
  />
  
  <article class="blog-post">
    <header class="blog-post-header">
      <h1>{title}</h1>
      <div class="blog-post-meta">
        <time datetime={pubDate.toISOString()}>
          {pubDate.toLocaleDateString(lang === 'es' ? 'es-CR' : 'en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          })}
        </time>
        {updatedDate && (
          <span class="updated">
            Updated: {updatedDate.toLocaleDateString(lang === 'es' ? 'es-CR' : 'en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}
          </span>
        )}
        <span class="author">By {author}</span>
      </div>
      {tags.length > 0 && (
        <div class="blog-post-tags">
          {tags.map((tag) => (
            <span class="tag">{tag}</span>
          ))}
        </div>
      )}
    </header>
    <div class="blog-post-content">
      <slot />
    </div>
  </article>
</BaseLayout>

<style>
  .blog-post {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .blog-post-header {
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid var(--color-border, #e5e7eb);
  }

  .blog-post-header h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    color: var(--color-text-primary, #1f2937);
  }

  .blog-post-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    color: var(--color-text-secondary, #6b7280);
    font-size: 0.9rem;
  }

  .blog-post-meta .updated {
    font-style: italic;
  }

  .blog-post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .tag {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    background-color: var(--color-accent-light, #dbeafe);
    color: var(--color-accent-dark, #1e40af);
    border-radius: 1rem;
    font-size: 0.875rem;
  }

  .blog-post-content {
    line-height: 1.75;
    font-size: 1.125rem;
  }

  .blog-post-content :global(h2) {
    font-size: 2rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .blog-post-content :global(h3) {
    font-size: 1.5rem;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }

  .blog-post-content :global(p) {
    margin-bottom: 1.25rem;
  }

  .blog-post-content :global(ul),
  .blog-post-content :global(ol) {
    margin-bottom: 1.25rem;
    padding-left: 2rem;
  }

  .blog-post-content :global(li) {
    margin-bottom: 0.5rem;
  }

  .blog-post-content :global(code) {
    background-color: var(--color-code-bg, #f3f4f6);
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
    font-size: 0.9em;
  }

  .blog-post-content :global(pre) {
    background-color: var(--color-code-bg, #1f2937);
    color: var(--color-code-text, #f9fafb);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin-bottom: 1.25rem;
  }

  .blog-post-content :global(pre code) {
    background-color: transparent;
    padding: 0;
  }

  @media (max-width: 768px) {
    .blog-post-header h1 {
      font-size: 2rem;
    }

    .blog-post-content {
      font-size: 1rem;
    }
  }
</style>
